----------------- Lecture-03 Starts -------------------------

-- Create Table Students
CREATE TABLE Students(
	[ID]	int,
	[Name]	varchar(100),
	[Class]	varchar(100)
);

GO

CREATE TABLE StudentGrades(
	[Grade_ID]	int,
	[Student_ID]	int,
	[Subject]	varchar(100),
	[Grade]	varchar(100)
);

GO

ALTER TABLE Students DROP COLUMN [ID];

GO

ALTER TABLE Students ADD STUDENT_ID INT;

GO

DROP TABLE Students;

----------------- Lecture-03 Ends -------------------------

----------------- Lecture-04 Starts -------------------------

INSERT INTO Students (Student_ID,Name,Class) VALUES (1,'Shuvo', 3);
INSERT INTO Students (Student_ID,Name,Class) VALUES (2,'Mahmud', 3);
INSERT INTO Students (Student_ID,Name,Class) VALUES (3,'Kashem', 3);
INSERT INTO Students (Student_ID,Name,Class) VALUES (4,'Ripon', 3);
INSERT INTO Students (Student_ID,Name,Class) VALUES (5,'Zahid', 4);

GO

INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (1,1,'Bangla', 'A',88);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (2,1,'English', 'A+',90);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (3,1,'Math', 'A', 85);

INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (4,2,'Bangla', 'A+', 91);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (5,2,'English', 'A',87);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (6,2,'Math', 'A+',96);

INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (7,3,'Bangla', 'B+', 81);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (8,3,'English', 'B-',78);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (9,3,'Math', 'A+',90);

INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (10,6,'Bangla', 'B+', 81);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (11,6,'English', 'B-',78);
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (12,6,'Math', 'A+',90);

GO

UPDATE Students SET Class = '4' WHERE Student_ID = 4;

GO

DELETE FROM Students WHERE Student_ID = 4

GO
----------------- Lecture-04 Ends -------------------------

----------------- Lecture-05 Starts -------------------------

SELECT * From students;

GO

SELECT student_id,Name,class 
From Students;

GO

SELECT student_id,Name,class 
From Students 
WHERE Student_ID = 4;

GO

SELECT TOP 2 student_id,Name,class 
From Students; 

GO

SELECT student_id,Name,class 
From Students 
ORDER BY Name;

GO

SELECT DISTINCT class 
From Students;

GO

SELECT class,count(*) 
From Students 
Group BY class;

GO

SELECT class,count(*) 
From Students 
Group BY class
Having Count(*)>1;

GO

----------------- Lecture-05 Ends -------------------------

----------------- Lecture-06 Starts -----------------------

SELECT class,count(*) 
From Students 
Group BY class


GO

SELECT Student_ID, SUM(marks)
From StudentGrades 
Group BY Student_ID

GO

SELECT Student_ID, MIN(marks)
From StudentGrades 
Group BY Student_ID

GO

SELECT Student_ID, MAX(marks)
From StudentGrades 
Group BY Student_ID

GO

SELECT Student_ID, AVG(marks)
From StudentGrades 
Group BY Student_ID

GO
----------------- Lecture-06 Ends -------------------------

----------------- Lecture-07 Starts -------------------------

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A INNER JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A LEFT JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A RIGHT JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A FULL JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

----------------- Lecture-07 Ends -------------------------

----------------- Lecture-08 Starts -------------------------
ALTER TABLE StudentGrades ALTER COLUMN Marks INT NOT NULL
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade) VALUES (12,6,'Math', 'A+');
ALTER TABLE StudentGrades ALTER COLUMN Marks INT NULL

ALTER TABLE StudentGrades ADD CONSTRAINT StudentGrades_Grade_ID_unq UNIQUE (Grade_ID)
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (12,6,'Math', 'A+',90);
ALTER TABLE StudentGrades DROP CONSTRAINT StudentGrades_Grade_ID_unq

ALTER TABLE StudentGrades ADD PRIMARY KEY (Grade_ID);
ALTER TABLE StudentGrades ALTER COLUMN Grade_ID INT NOT NULL
INSERT INTO StudentGrades(Grade_ID, Student_ID, Subject, Grade, Marks) VALUES (13,6,'Math', 'A+',90);
----------------- Lecture-08 Ends -------------------------

----------------- Lecture-09 Starts -------------------------

CREATE VIEW Students_with_marks
AS

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A INNER JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

SELECT * FROM Students_with_marks

ALTER VIEW Students_with_marks
AS

SELECT A.Student_ID as [SID], A.Name as StudentName, A.Class,B.Subject, B.Grade, B.Marks 
FROM Students A INNER JOIN StudentGrades B ON A.Student_ID = B.Student_ID;

GO

SELECT * FROM Students_with_marks;

-------------------

CREATE PROC proc_Add_Student(
	@Student_ID	int,
	@Name	varchar(50),
	@class	varchar(50)
)

AS

INSERT INTO Students (Student_ID,Name,Class) 
VALUES (@Student_ID,@Name,@class);

exec proc_Add_Student 5,'Hasan', '5'

SELECT * FROM Students;

-----------------

ALTER Function udf_compliments(
	@grade	int
)
RETURNS varchar(100)
As 
BEGIN

Declare @res varchar(100)

If @grade >90
	SET @res = 'EXCELLENT'
Else
	SET @res = 'GOOD!'

Return @res
END

select  dbo.udf_compliments(91)

SELECT A.Student_ID, A.Name,A.Class,B.Subject, B.Grade,  B.Marks, dbo.udf_compliments(B.Marks ) as 'compliments' 
FROM Students A RIGHT JOIN StudentGrades B ON A.Student_ID = B.Student_ID;


----------------- Lecture-09 Ends -------------------------

----------------- Lecture-10 Starts -------------------------
ALTER TABLE StudentGrades ADD PRIMARY KEY (Grade_ID);
ALTER TABLE StudentGrades ALTER COLUMN Grade_ID INT NOT NULL

create index StudentGrades_Student_ID on StudentGrades(Student_ID)

----------------- Lecture-10 Ends -------------------------

----------------- Lecture-11 Starts -------------------------
DECLARE @myvar AS VARCHAR(100)
SET @myvar = 'Hello World!'
PRINT @myvar
SELECT top 1 @myvar = name FROM Students

PRINT @myvar


------

SELECT 
    name,
    class
INTO #temp_students
FROM
    STUDENTS

SELECT * from #temp_students

DROP table #temp_students

SELECT * from #temp_students

------

CREATE TABLE #temp_students (
    t_name VARCHAR(100),
    t_class VARCHAR(100)
);

INSERT INTO #temp_students
SELECT
    name,
    class
FROM
    STUDENTS

SELECT * from #temp_students

DROP table #temp_students

-----
CREATE TABLE ##glo_students (
	t_name VARCHAR(100),
    	t_class VARCHAR(100)
);

INSERT INTO ##glo_students
SELECT
    name,
    class
FROM
    STUDENTS

SELECT * from ##glo_students

SELECT * from ##glo_students

---------------

ALTER PROC proc_Add_Student(
	@Student_ID	int,
	@Name	varchar(50),
	@class	varchar(50)
)

AS

Begin Try
INSERT INTO Students (Student_ID,Name,Class) 
VALUES (@Student_ID,@Name,@class);
End Try
BEGIN CATCH
  SELECT
    ERROR_NUMBER() AS ErrorNumber,
    ERROR_STATE() AS ErrorState,
    ERROR_SEVERITY() AS ErrorSeverity,
    ERROR_PROCEDURE() AS ErrorProcedure,
    ERROR_LINE() AS ErrorLine,
    ERROR_MESSAGE() AS ErrorMessage;
END CATCH;


exec proc_Add_Student 5,'Hasan', '5'

SELECT * FROM Students;

ALTER TABLE Students ADD PRIMARY KEY (Student_ID);
ALTER TABLE Students ALTER COLUMN Student_ID INT NOT NULL

----------------- Lecture-11 Ends -------------------------

----------------- Lecture-12 Starts -------------------------

BACKUP DATABASE [MyTestDB]
To DISK='C:\Mehedi\MyTestDB.BAK'
WITH FORMAT,
      MEDIANAME = 'Native_SQLServerBackup',
      NAME = 'Full-MyTestDB backup';

BACKUP DATABASE [MyTestDB]
   To DISK='C:\Mehedi\MyTestDB_Diff.BAK'
   WITH DIFFERENTIAL,
    MEDIANAME = 'Native_SQLServerDiffBackup',
    NAME = 'Diff-MyTestDB backup';

BACKUP LOG [MyTestDB]
   To DISK='C:\Mehedi\MyTestDB_Log.trn'
   WITH
   MEDIANAME = 'Native_SQLServerLogBackup',
    NAME = 'Log-MyTestDB backup';

